//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace PCS.Report.XSD {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsDayShiftEndBalance : DataSet {
        
        private DSEBDataTable tableDSEB;
        
        public dsDayShiftEndBalance() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsDayShiftEndBalance(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DSEB"] != null)) {
                    this.Tables.Add(new DSEBDataTable(ds.Tables["DSEB"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DSEBDataTable DSEB {
            get {
                return this.tableDSEB;
            }
        }
        
        public override DataSet Clone() {
            dsDayShiftEndBalance cln = ((dsDayShiftEndBalance)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DSEB"] != null)) {
                this.Tables.Add(new DSEBDataTable(ds.Tables["DSEB"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDSEB = ((DSEBDataTable)(this.Tables["DSEB"]));
            if ((this.tableDSEB != null)) {
                this.tableDSEB.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsDayShiftEndBalance";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsDayShiftEndBalance.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDSEB = new DSEBDataTable();
            this.Tables.Add(this.tableDSEB);
        }
        
        private bool ShouldSerializeDSEB() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DSEBRowChangeEventHandler(object sender, DSEBRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DSEBDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnModeDesc;
            
            private DataColumn columnID;
            
            private DataColumn columnCode;
            
            private DataColumn columnDesc;
            
            private DataColumn columnTradingCurrency;
            
            private DataColumn columnAmount;
            
            internal DSEBDataTable() : 
                    base("DSEB") {
                this.InitClass();
            }
            
            internal DSEBDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ModeDescColumn {
                get {
                    return this.columnModeDesc;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            internal DataColumn DescColumn {
                get {
                    return this.columnDesc;
                }
            }
            
            internal DataColumn TradingCurrencyColumn {
                get {
                    return this.columnTradingCurrency;
                }
            }
            
            internal DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            public DSEBRow this[int index] {
                get {
                    return ((DSEBRow)(this.Rows[index]));
                }
            }
            
            public event DSEBRowChangeEventHandler DSEBRowChanged;
            
            public event DSEBRowChangeEventHandler DSEBRowChanging;
            
            public event DSEBRowChangeEventHandler DSEBRowDeleted;
            
            public event DSEBRowChangeEventHandler DSEBRowDeleting;
            
            public void AddDSEBRow(DSEBRow row) {
                this.Rows.Add(row);
            }
            
            public DSEBRow AddDSEBRow(string ModeDesc, long ID, string Code, string Desc, string TradingCurrency, System.Decimal Amount) {
                DSEBRow rowDSEBRow = ((DSEBRow)(this.NewRow()));
                rowDSEBRow.ItemArray = new object[] {
                        ModeDesc,
                        ID,
                        Code,
                        Desc,
                        TradingCurrency,
                        Amount};
                this.Rows.Add(rowDSEBRow);
                return rowDSEBRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DSEBDataTable cln = ((DSEBDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DSEBDataTable();
            }
            
            internal void InitVars() {
                this.columnModeDesc = this.Columns["ModeDesc"];
                this.columnID = this.Columns["ID"];
                this.columnCode = this.Columns["Code"];
                this.columnDesc = this.Columns["Desc"];
                this.columnTradingCurrency = this.Columns["TradingCurrency"];
                this.columnAmount = this.Columns["Amount"];
            }
            
            private void InitClass() {
                this.columnModeDesc = new DataColumn("ModeDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModeDesc);
                this.columnID = new DataColumn("ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnCode = new DataColumn("Code", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCode);
                this.columnDesc = new DataColumn("Desc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDesc);
                this.columnTradingCurrency = new DataColumn("TradingCurrency", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTradingCurrency);
                this.columnAmount = new DataColumn("Amount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmount);
            }
            
            public DSEBRow NewDSEBRow() {
                return ((DSEBRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DSEBRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DSEBRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DSEBRowChanged != null)) {
                    this.DSEBRowChanged(this, new DSEBRowChangeEvent(((DSEBRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DSEBRowChanging != null)) {
                    this.DSEBRowChanging(this, new DSEBRowChangeEvent(((DSEBRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DSEBRowDeleted != null)) {
                    this.DSEBRowDeleted(this, new DSEBRowChangeEvent(((DSEBRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DSEBRowDeleting != null)) {
                    this.DSEBRowDeleting(this, new DSEBRowChangeEvent(((DSEBRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDSEBRow(DSEBRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DSEBRow : DataRow {
            
            private DSEBDataTable tableDSEB;
            
            internal DSEBRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDSEB = ((DSEBDataTable)(this.Table));
            }
            
            public string ModeDesc {
                get {
                    try {
                        return ((string)(this[this.tableDSEB.ModeDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSEB.ModeDescColumn] = value;
                }
            }
            
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableDSEB.IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSEB.IDColumn] = value;
                }
            }
            
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableDSEB.CodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSEB.CodeColumn] = value;
                }
            }
            
            public string Desc {
                get {
                    try {
                        return ((string)(this[this.tableDSEB.DescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSEB.DescColumn] = value;
                }
            }
            
            public string TradingCurrency {
                get {
                    try {
                        return ((string)(this[this.tableDSEB.TradingCurrencyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSEB.TradingCurrencyColumn] = value;
                }
            }
            
            public System.Decimal Amount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDSEB.AmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSEB.AmountColumn] = value;
                }
            }
            
            public bool IsModeDescNull() {
                return this.IsNull(this.tableDSEB.ModeDescColumn);
            }
            
            public void SetModeDescNull() {
                this[this.tableDSEB.ModeDescColumn] = System.Convert.DBNull;
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableDSEB.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableDSEB.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeNull() {
                return this.IsNull(this.tableDSEB.CodeColumn);
            }
            
            public void SetCodeNull() {
                this[this.tableDSEB.CodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescNull() {
                return this.IsNull(this.tableDSEB.DescColumn);
            }
            
            public void SetDescNull() {
                this[this.tableDSEB.DescColumn] = System.Convert.DBNull;
            }
            
            public bool IsTradingCurrencyNull() {
                return this.IsNull(this.tableDSEB.TradingCurrencyColumn);
            }
            
            public void SetTradingCurrencyNull() {
                this[this.tableDSEB.TradingCurrencyColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountNull() {
                return this.IsNull(this.tableDSEB.AmountColumn);
            }
            
            public void SetAmountNull() {
                this[this.tableDSEB.AmountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DSEBRowChangeEvent : EventArgs {
            
            private DSEBRow eventRow;
            
            private DataRowAction eventAction;
            
            public DSEBRowChangeEvent(DSEBRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DSEBRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
