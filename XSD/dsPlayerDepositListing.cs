//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace PCS.Report.XSD {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPlayerDepositListing : DataSet {
        
        private DepositDataTable tableDeposit;
        
        public dsPlayerDepositListing() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsPlayerDepositListing(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Deposit"] != null)) {
                    this.Tables.Add(new DepositDataTable(ds.Tables["Deposit"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DepositDataTable Deposit {
            get {
                return this.tableDeposit;
            }
        }
        
        public override DataSet Clone() {
            dsPlayerDepositListing cln = ((dsPlayerDepositListing)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Deposit"] != null)) {
                this.Tables.Add(new DepositDataTable(ds.Tables["Deposit"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDeposit = ((DepositDataTable)(this.Tables["Deposit"]));
            if ((this.tableDeposit != null)) {
                this.tableDeposit.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsPlayerDepositListing";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsPlayerDepositListing.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDeposit = new DepositDataTable();
            this.Tables.Add(this.tableDeposit);
        }
        
        private bool ShouldSerializeDeposit() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DepositRowChangeEventHandler(object sender, DepositRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DepositDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPCCTID;
            
            private DataColumn columnpcctCardID;
            
            private DataColumn columnpcctCustID;
            
            private DataColumn columnpcctName;
            
            private DataColumn columnpcctICPassportNo;
            
            private DataColumn columnpcctCardType;
            
            private DataColumn columnlhCode;
            
            private DataColumn columntmCode;
            
            private DataColumn columnshfShiftNo;
            
            private DataColumn columnpcctTradingDate;
            
            private DataColumn columnfcAbbrvCode;
            
            private DataColumn columnpmCode;
            
            private DataColumn columnpccpmAmount;
            
            private DataColumn columnpcctIsVoided;
            
            private DataColumn columnpcctVoidedBy;
            
            private DataColumn columnpcctVoidDate;
            
            private DataColumn columnpcctVoidRemarks;
            
            private DataColumn columnCreatedBy;
            
            private DataColumn columnDateCreated;
            
            internal DepositDataTable() : 
                    base("Deposit") {
                this.InitClass();
            }
            
            internal DepositDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PCCTIDColumn {
                get {
                    return this.columnPCCTID;
                }
            }
            
            internal DataColumn pcctCardIDColumn {
                get {
                    return this.columnpcctCardID;
                }
            }
            
            internal DataColumn pcctCustIDColumn {
                get {
                    return this.columnpcctCustID;
                }
            }
            
            internal DataColumn pcctNameColumn {
                get {
                    return this.columnpcctName;
                }
            }
            
            internal DataColumn pcctICPassportNoColumn {
                get {
                    return this.columnpcctICPassportNo;
                }
            }
            
            internal DataColumn pcctCardTypeColumn {
                get {
                    return this.columnpcctCardType;
                }
            }
            
            internal DataColumn lhCodeColumn {
                get {
                    return this.columnlhCode;
                }
            }
            
            internal DataColumn tmCodeColumn {
                get {
                    return this.columntmCode;
                }
            }
            
            internal DataColumn shfShiftNoColumn {
                get {
                    return this.columnshfShiftNo;
                }
            }
            
            internal DataColumn pcctTradingDateColumn {
                get {
                    return this.columnpcctTradingDate;
                }
            }
            
            internal DataColumn fcAbbrvCodeColumn {
                get {
                    return this.columnfcAbbrvCode;
                }
            }
            
            internal DataColumn pmCodeColumn {
                get {
                    return this.columnpmCode;
                }
            }
            
            internal DataColumn pccpmAmountColumn {
                get {
                    return this.columnpccpmAmount;
                }
            }
            
            internal DataColumn pcctIsVoidedColumn {
                get {
                    return this.columnpcctIsVoided;
                }
            }
            
            internal DataColumn pcctVoidedByColumn {
                get {
                    return this.columnpcctVoidedBy;
                }
            }
            
            internal DataColumn pcctVoidDateColumn {
                get {
                    return this.columnpcctVoidDate;
                }
            }
            
            internal DataColumn pcctVoidRemarksColumn {
                get {
                    return this.columnpcctVoidRemarks;
                }
            }
            
            internal DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            internal DataColumn DateCreatedColumn {
                get {
                    return this.columnDateCreated;
                }
            }
            
            public DepositRow this[int index] {
                get {
                    return ((DepositRow)(this.Rows[index]));
                }
            }
            
            public event DepositRowChangeEventHandler DepositRowChanged;
            
            public event DepositRowChangeEventHandler DepositRowChanging;
            
            public event DepositRowChangeEventHandler DepositRowDeleted;
            
            public event DepositRowChangeEventHandler DepositRowDeleting;
            
            public void AddDepositRow(DepositRow row) {
                this.Rows.Add(row);
            }
            
            public DepositRow AddDepositRow(
                        string PCCTID, 
                        string pcctCardID, 
                        string pcctCustID, 
                        string pcctName, 
                        string pcctICPassportNo, 
                        string pcctCardType, 
                        string lhCode, 
                        string tmCode, 
                        long shfShiftNo, 
                        System.DateTime pcctTradingDate, 
                        string fcAbbrvCode, 
                        string pmCode, 
                        System.Decimal pccpmAmount, 
                        bool pcctIsVoided, 
                        string pcctVoidedBy, 
                        System.DateTime pcctVoidDate, 
                        string pcctVoidRemarks, 
                        string CreatedBy, 
                        System.DateTime DateCreated) {
                DepositRow rowDepositRow = ((DepositRow)(this.NewRow()));
                rowDepositRow.ItemArray = new object[] {
                        PCCTID,
                        pcctCardID,
                        pcctCustID,
                        pcctName,
                        pcctICPassportNo,
                        pcctCardType,
                        lhCode,
                        tmCode,
                        shfShiftNo,
                        pcctTradingDate,
                        fcAbbrvCode,
                        pmCode,
                        pccpmAmount,
                        pcctIsVoided,
                        pcctVoidedBy,
                        pcctVoidDate,
                        pcctVoidRemarks,
                        CreatedBy,
                        DateCreated};
                this.Rows.Add(rowDepositRow);
                return rowDepositRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DepositDataTable cln = ((DepositDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DepositDataTable();
            }
            
            internal void InitVars() {
                this.columnPCCTID = this.Columns["PCCTID"];
                this.columnpcctCardID = this.Columns["pcctCardID"];
                this.columnpcctCustID = this.Columns["pcctCustID"];
                this.columnpcctName = this.Columns["pcctName"];
                this.columnpcctICPassportNo = this.Columns["pcctICPassportNo"];
                this.columnpcctCardType = this.Columns["pcctCardType"];
                this.columnlhCode = this.Columns["lhCode"];
                this.columntmCode = this.Columns["tmCode"];
                this.columnshfShiftNo = this.Columns["shfShiftNo"];
                this.columnpcctTradingDate = this.Columns["pcctTradingDate"];
                this.columnfcAbbrvCode = this.Columns["fcAbbrvCode"];
                this.columnpmCode = this.Columns["pmCode"];
                this.columnpccpmAmount = this.Columns["pccpmAmount"];
                this.columnpcctIsVoided = this.Columns["pcctIsVoided"];
                this.columnpcctVoidedBy = this.Columns["pcctVoidedBy"];
                this.columnpcctVoidDate = this.Columns["pcctVoidDate"];
                this.columnpcctVoidRemarks = this.Columns["pcctVoidRemarks"];
                this.columnCreatedBy = this.Columns["CreatedBy"];
                this.columnDateCreated = this.Columns["DateCreated"];
            }
            
            private void InitClass() {
                this.columnPCCTID = new DataColumn("PCCTID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPCCTID);
                this.columnpcctCardID = new DataColumn("pcctCardID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctCardID);
                this.columnpcctCustID = new DataColumn("pcctCustID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctCustID);
                this.columnpcctName = new DataColumn("pcctName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctName);
                this.columnpcctICPassportNo = new DataColumn("pcctICPassportNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctICPassportNo);
                this.columnpcctCardType = new DataColumn("pcctCardType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctCardType);
                this.columnlhCode = new DataColumn("lhCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlhCode);
                this.columntmCode = new DataColumn("tmCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntmCode);
                this.columnshfShiftNo = new DataColumn("shfShiftNo", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnshfShiftNo);
                this.columnpcctTradingDate = new DataColumn("pcctTradingDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctTradingDate);
                this.columnfcAbbrvCode = new DataColumn("fcAbbrvCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfcAbbrvCode);
                this.columnpmCode = new DataColumn("pmCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpmCode);
                this.columnpccpmAmount = new DataColumn("pccpmAmount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpccpmAmount);
                this.columnpcctIsVoided = new DataColumn("pcctIsVoided", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctIsVoided);
                this.columnpcctVoidedBy = new DataColumn("pcctVoidedBy", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctVoidedBy);
                this.columnpcctVoidDate = new DataColumn("pcctVoidDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctVoidDate);
                this.columnpcctVoidRemarks = new DataColumn("pcctVoidRemarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctVoidRemarks);
                this.columnCreatedBy = new DataColumn("CreatedBy", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedBy);
                this.columnDateCreated = new DataColumn("DateCreated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateCreated);
            }
            
            public DepositRow NewDepositRow() {
                return ((DepositRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DepositRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DepositRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DepositRowChanged != null)) {
                    this.DepositRowChanged(this, new DepositRowChangeEvent(((DepositRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DepositRowChanging != null)) {
                    this.DepositRowChanging(this, new DepositRowChangeEvent(((DepositRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DepositRowDeleted != null)) {
                    this.DepositRowDeleted(this, new DepositRowChangeEvent(((DepositRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DepositRowDeleting != null)) {
                    this.DepositRowDeleting(this, new DepositRowChangeEvent(((DepositRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDepositRow(DepositRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DepositRow : DataRow {
            
            private DepositDataTable tableDeposit;
            
            internal DepositRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeposit = ((DepositDataTable)(this.Table));
            }
            
            public string PCCTID {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.PCCTIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.PCCTIDColumn] = value;
                }
            }
            
            public string pcctCardID {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.pcctCardIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctCardIDColumn] = value;
                }
            }
            
            public string pcctCustID {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.pcctCustIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctCustIDColumn] = value;
                }
            }
            
            public string pcctName {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.pcctNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctNameColumn] = value;
                }
            }
            
            public string pcctICPassportNo {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.pcctICPassportNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctICPassportNoColumn] = value;
                }
            }
            
            public string pcctCardType {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.pcctCardTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctCardTypeColumn] = value;
                }
            }
            
            public string lhCode {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.lhCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.lhCodeColumn] = value;
                }
            }
            
            public string tmCode {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.tmCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.tmCodeColumn] = value;
                }
            }
            
            public long shfShiftNo {
                get {
                    try {
                        return ((long)(this[this.tableDeposit.shfShiftNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.shfShiftNoColumn] = value;
                }
            }
            
            public System.DateTime pcctTradingDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDeposit.pcctTradingDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctTradingDateColumn] = value;
                }
            }
            
            public string fcAbbrvCode {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.fcAbbrvCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.fcAbbrvCodeColumn] = value;
                }
            }
            
            public string pmCode {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.pmCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pmCodeColumn] = value;
                }
            }
            
            public System.Decimal pccpmAmount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDeposit.pccpmAmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pccpmAmountColumn] = value;
                }
            }
            
            public bool pcctIsVoided {
                get {
                    try {
                        return ((bool)(this[this.tableDeposit.pcctIsVoidedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctIsVoidedColumn] = value;
                }
            }
            
            public string pcctVoidedBy {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.pcctVoidedByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctVoidedByColumn] = value;
                }
            }
            
            public System.DateTime pcctVoidDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDeposit.pcctVoidDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctVoidDateColumn] = value;
                }
            }
            
            public string pcctVoidRemarks {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.pcctVoidRemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.pcctVoidRemarksColumn] = value;
                }
            }
            
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableDeposit.CreatedByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.CreatedByColumn] = value;
                }
            }
            
            public System.DateTime DateCreated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDeposit.DateCreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeposit.DateCreatedColumn] = value;
                }
            }
            
            public bool IsPCCTIDNull() {
                return this.IsNull(this.tableDeposit.PCCTIDColumn);
            }
            
            public void SetPCCTIDNull() {
                this[this.tableDeposit.PCCTIDColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctCardIDNull() {
                return this.IsNull(this.tableDeposit.pcctCardIDColumn);
            }
            
            public void SetpcctCardIDNull() {
                this[this.tableDeposit.pcctCardIDColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctCustIDNull() {
                return this.IsNull(this.tableDeposit.pcctCustIDColumn);
            }
            
            public void SetpcctCustIDNull() {
                this[this.tableDeposit.pcctCustIDColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctNameNull() {
                return this.IsNull(this.tableDeposit.pcctNameColumn);
            }
            
            public void SetpcctNameNull() {
                this[this.tableDeposit.pcctNameColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctICPassportNoNull() {
                return this.IsNull(this.tableDeposit.pcctICPassportNoColumn);
            }
            
            public void SetpcctICPassportNoNull() {
                this[this.tableDeposit.pcctICPassportNoColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctCardTypeNull() {
                return this.IsNull(this.tableDeposit.pcctCardTypeColumn);
            }
            
            public void SetpcctCardTypeNull() {
                this[this.tableDeposit.pcctCardTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IslhCodeNull() {
                return this.IsNull(this.tableDeposit.lhCodeColumn);
            }
            
            public void SetlhCodeNull() {
                this[this.tableDeposit.lhCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IstmCodeNull() {
                return this.IsNull(this.tableDeposit.tmCodeColumn);
            }
            
            public void SettmCodeNull() {
                this[this.tableDeposit.tmCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsshfShiftNoNull() {
                return this.IsNull(this.tableDeposit.shfShiftNoColumn);
            }
            
            public void SetshfShiftNoNull() {
                this[this.tableDeposit.shfShiftNoColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctTradingDateNull() {
                return this.IsNull(this.tableDeposit.pcctTradingDateColumn);
            }
            
            public void SetpcctTradingDateNull() {
                this[this.tableDeposit.pcctTradingDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsfcAbbrvCodeNull() {
                return this.IsNull(this.tableDeposit.fcAbbrvCodeColumn);
            }
            
            public void SetfcAbbrvCodeNull() {
                this[this.tableDeposit.fcAbbrvCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IspmCodeNull() {
                return this.IsNull(this.tableDeposit.pmCodeColumn);
            }
            
            public void SetpmCodeNull() {
                this[this.tableDeposit.pmCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IspccpmAmountNull() {
                return this.IsNull(this.tableDeposit.pccpmAmountColumn);
            }
            
            public void SetpccpmAmountNull() {
                this[this.tableDeposit.pccpmAmountColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctIsVoidedNull() {
                return this.IsNull(this.tableDeposit.pcctIsVoidedColumn);
            }
            
            public void SetpcctIsVoidedNull() {
                this[this.tableDeposit.pcctIsVoidedColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctVoidedByNull() {
                return this.IsNull(this.tableDeposit.pcctVoidedByColumn);
            }
            
            public void SetpcctVoidedByNull() {
                this[this.tableDeposit.pcctVoidedByColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctVoidDateNull() {
                return this.IsNull(this.tableDeposit.pcctVoidDateColumn);
            }
            
            public void SetpcctVoidDateNull() {
                this[this.tableDeposit.pcctVoidDateColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctVoidRemarksNull() {
                return this.IsNull(this.tableDeposit.pcctVoidRemarksColumn);
            }
            
            public void SetpcctVoidRemarksNull() {
                this[this.tableDeposit.pcctVoidRemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableDeposit.CreatedByColumn);
            }
            
            public void SetCreatedByNull() {
                this[this.tableDeposit.CreatedByColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateCreatedNull() {
                return this.IsNull(this.tableDeposit.DateCreatedColumn);
            }
            
            public void SetDateCreatedNull() {
                this[this.tableDeposit.DateCreatedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DepositRowChangeEvent : EventArgs {
            
            private DepositRow eventRow;
            
            private DataRowAction eventAction;
            
            public DepositRowChangeEvent(DepositRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DepositRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
