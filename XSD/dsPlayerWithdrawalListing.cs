//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace PCS.Report.XSD {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPlayerWithdrawalListing : DataSet {
        
        private WithdrawalDataTable tableWithdrawal;
        
        public dsPlayerWithdrawalListing() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsPlayerWithdrawalListing(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Withdrawal"] != null)) {
                    this.Tables.Add(new WithdrawalDataTable(ds.Tables["Withdrawal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WithdrawalDataTable Withdrawal {
            get {
                return this.tableWithdrawal;
            }
        }
        
        public override DataSet Clone() {
            dsPlayerWithdrawalListing cln = ((dsPlayerWithdrawalListing)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Withdrawal"] != null)) {
                this.Tables.Add(new WithdrawalDataTable(ds.Tables["Withdrawal"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableWithdrawal = ((WithdrawalDataTable)(this.Tables["Withdrawal"]));
            if ((this.tableWithdrawal != null)) {
                this.tableWithdrawal.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsPlayerWithdrawalListing";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsPlayerWithdrawalListing.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableWithdrawal = new WithdrawalDataTable();
            this.Tables.Add(this.tableWithdrawal);
        }
        
        private bool ShouldSerializeWithdrawal() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void WithdrawalRowChangeEventHandler(object sender, WithdrawalRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WithdrawalDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPCCTID;
            
            private DataColumn columnpcctCardID;
            
            private DataColumn columnpcctCustID;
            
            private DataColumn columnpcctName;
            
            private DataColumn columnpcctICPassportNo;
            
            private DataColumn columnpcctCardType;
            
            private DataColumn columnlhCode;
            
            private DataColumn columntmCode;
            
            private DataColumn columnshfShiftNo;
            
            private DataColumn columnpcctTradingDate;
            
            private DataColumn columnfcAbbrvCode;
            
            private DataColumn columncmCode;
            
            private DataColumn columnpcccmAmount;
            
            private DataColumn columnDRSDocNo;
            
            private DataColumn columnpcctIsVoided;
            
            private DataColumn columnpcctVoidedBy;
            
            private DataColumn columnpcctVoidDate;
            
            private DataColumn columnpcctVoidRemarks;
            
            private DataColumn columnDRSCancelDocNo;
            
            private DataColumn columnCreatedBy;
            
            private DataColumn columnDateCreated;
            
            internal WithdrawalDataTable() : 
                    base("Withdrawal") {
                this.InitClass();
            }
            
            internal WithdrawalDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PCCTIDColumn {
                get {
                    return this.columnPCCTID;
                }
            }
            
            internal DataColumn pcctCardIDColumn {
                get {
                    return this.columnpcctCardID;
                }
            }
            
            internal DataColumn pcctCustIDColumn {
                get {
                    return this.columnpcctCustID;
                }
            }
            
            internal DataColumn pcctNameColumn {
                get {
                    return this.columnpcctName;
                }
            }
            
            internal DataColumn pcctICPassportNoColumn {
                get {
                    return this.columnpcctICPassportNo;
                }
            }
            
            internal DataColumn pcctCardTypeColumn {
                get {
                    return this.columnpcctCardType;
                }
            }
            
            internal DataColumn lhCodeColumn {
                get {
                    return this.columnlhCode;
                }
            }
            
            internal DataColumn tmCodeColumn {
                get {
                    return this.columntmCode;
                }
            }
            
            internal DataColumn shfShiftNoColumn {
                get {
                    return this.columnshfShiftNo;
                }
            }
            
            internal DataColumn pcctTradingDateColumn {
                get {
                    return this.columnpcctTradingDate;
                }
            }
            
            internal DataColumn fcAbbrvCodeColumn {
                get {
                    return this.columnfcAbbrvCode;
                }
            }
            
            internal DataColumn cmCodeColumn {
                get {
                    return this.columncmCode;
                }
            }
            
            internal DataColumn pcccmAmountColumn {
                get {
                    return this.columnpcccmAmount;
                }
            }
            
            internal DataColumn DRSDocNoColumn {
                get {
                    return this.columnDRSDocNo;
                }
            }
            
            internal DataColumn pcctIsVoidedColumn {
                get {
                    return this.columnpcctIsVoided;
                }
            }
            
            internal DataColumn pcctVoidedByColumn {
                get {
                    return this.columnpcctVoidedBy;
                }
            }
            
            internal DataColumn pcctVoidDateColumn {
                get {
                    return this.columnpcctVoidDate;
                }
            }
            
            internal DataColumn pcctVoidRemarksColumn {
                get {
                    return this.columnpcctVoidRemarks;
                }
            }
            
            internal DataColumn DRSCancelDocNoColumn {
                get {
                    return this.columnDRSCancelDocNo;
                }
            }
            
            internal DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            internal DataColumn DateCreatedColumn {
                get {
                    return this.columnDateCreated;
                }
            }
            
            public WithdrawalRow this[int index] {
                get {
                    return ((WithdrawalRow)(this.Rows[index]));
                }
            }
            
            public event WithdrawalRowChangeEventHandler WithdrawalRowChanged;
            
            public event WithdrawalRowChangeEventHandler WithdrawalRowChanging;
            
            public event WithdrawalRowChangeEventHandler WithdrawalRowDeleted;
            
            public event WithdrawalRowChangeEventHandler WithdrawalRowDeleting;
            
            public void AddWithdrawalRow(WithdrawalRow row) {
                this.Rows.Add(row);
            }
            
            public WithdrawalRow AddWithdrawalRow(
                        string PCCTID, 
                        string pcctCardID, 
                        string pcctCustID, 
                        string pcctName, 
                        string pcctICPassportNo, 
                        string pcctCardType, 
                        string lhCode, 
                        string tmCode, 
                        long shfShiftNo, 
                        System.DateTime pcctTradingDate, 
                        string fcAbbrvCode, 
                        string cmCode, 
                        System.Decimal pcccmAmount, 
                        string DRSDocNo, 
                        bool pcctIsVoided, 
                        string pcctVoidedBy, 
                        System.DateTime pcctVoidDate, 
                        string pcctVoidRemarks, 
                        string DRSCancelDocNo, 
                        string CreatedBy, 
                        System.DateTime DateCreated) {
                WithdrawalRow rowWithdrawalRow = ((WithdrawalRow)(this.NewRow()));
                rowWithdrawalRow.ItemArray = new object[] {
                        PCCTID,
                        pcctCardID,
                        pcctCustID,
                        pcctName,
                        pcctICPassportNo,
                        pcctCardType,
                        lhCode,
                        tmCode,
                        shfShiftNo,
                        pcctTradingDate,
                        fcAbbrvCode,
                        cmCode,
                        pcccmAmount,
                        DRSDocNo,
                        pcctIsVoided,
                        pcctVoidedBy,
                        pcctVoidDate,
                        pcctVoidRemarks,
                        DRSCancelDocNo,
                        CreatedBy,
                        DateCreated};
                this.Rows.Add(rowWithdrawalRow);
                return rowWithdrawalRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WithdrawalDataTable cln = ((WithdrawalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WithdrawalDataTable();
            }
            
            internal void InitVars() {
                this.columnPCCTID = this.Columns["PCCTID"];
                this.columnpcctCardID = this.Columns["pcctCardID"];
                this.columnpcctCustID = this.Columns["pcctCustID"];
                this.columnpcctName = this.Columns["pcctName"];
                this.columnpcctICPassportNo = this.Columns["pcctICPassportNo"];
                this.columnpcctCardType = this.Columns["pcctCardType"];
                this.columnlhCode = this.Columns["lhCode"];
                this.columntmCode = this.Columns["tmCode"];
                this.columnshfShiftNo = this.Columns["shfShiftNo"];
                this.columnpcctTradingDate = this.Columns["pcctTradingDate"];
                this.columnfcAbbrvCode = this.Columns["fcAbbrvCode"];
                this.columncmCode = this.Columns["cmCode"];
                this.columnpcccmAmount = this.Columns["pcccmAmount"];
                this.columnDRSDocNo = this.Columns["DRSDocNo"];
                this.columnpcctIsVoided = this.Columns["pcctIsVoided"];
                this.columnpcctVoidedBy = this.Columns["pcctVoidedBy"];
                this.columnpcctVoidDate = this.Columns["pcctVoidDate"];
                this.columnpcctVoidRemarks = this.Columns["pcctVoidRemarks"];
                this.columnDRSCancelDocNo = this.Columns["DRSCancelDocNo"];
                this.columnCreatedBy = this.Columns["CreatedBy"];
                this.columnDateCreated = this.Columns["DateCreated"];
            }
            
            private void InitClass() {
                this.columnPCCTID = new DataColumn("PCCTID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPCCTID);
                this.columnpcctCardID = new DataColumn("pcctCardID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctCardID);
                this.columnpcctCustID = new DataColumn("pcctCustID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctCustID);
                this.columnpcctName = new DataColumn("pcctName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctName);
                this.columnpcctICPassportNo = new DataColumn("pcctICPassportNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctICPassportNo);
                this.columnpcctCardType = new DataColumn("pcctCardType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctCardType);
                this.columnlhCode = new DataColumn("lhCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlhCode);
                this.columntmCode = new DataColumn("tmCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntmCode);
                this.columnshfShiftNo = new DataColumn("shfShiftNo", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnshfShiftNo);
                this.columnpcctTradingDate = new DataColumn("pcctTradingDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctTradingDate);
                this.columnfcAbbrvCode = new DataColumn("fcAbbrvCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfcAbbrvCode);
                this.columncmCode = new DataColumn("cmCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncmCode);
                this.columnpcccmAmount = new DataColumn("pcccmAmount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcccmAmount);
                this.columnDRSDocNo = new DataColumn("DRSDocNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDRSDocNo);
                this.columnpcctIsVoided = new DataColumn("pcctIsVoided", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctIsVoided);
                this.columnpcctVoidedBy = new DataColumn("pcctVoidedBy", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctVoidedBy);
                this.columnpcctVoidDate = new DataColumn("pcctVoidDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctVoidDate);
                this.columnpcctVoidRemarks = new DataColumn("pcctVoidRemarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpcctVoidRemarks);
                this.columnDRSCancelDocNo = new DataColumn("DRSCancelDocNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDRSCancelDocNo);
                this.columnCreatedBy = new DataColumn("CreatedBy", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedBy);
                this.columnDateCreated = new DataColumn("DateCreated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateCreated);
            }
            
            public WithdrawalRow NewWithdrawalRow() {
                return ((WithdrawalRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WithdrawalRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WithdrawalRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WithdrawalRowChanged != null)) {
                    this.WithdrawalRowChanged(this, new WithdrawalRowChangeEvent(((WithdrawalRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WithdrawalRowChanging != null)) {
                    this.WithdrawalRowChanging(this, new WithdrawalRowChangeEvent(((WithdrawalRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WithdrawalRowDeleted != null)) {
                    this.WithdrawalRowDeleted(this, new WithdrawalRowChangeEvent(((WithdrawalRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WithdrawalRowDeleting != null)) {
                    this.WithdrawalRowDeleting(this, new WithdrawalRowChangeEvent(((WithdrawalRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWithdrawalRow(WithdrawalRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WithdrawalRow : DataRow {
            
            private WithdrawalDataTable tableWithdrawal;
            
            internal WithdrawalRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWithdrawal = ((WithdrawalDataTable)(this.Table));
            }
            
            public string PCCTID {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.PCCTIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.PCCTIDColumn] = value;
                }
            }
            
            public string pcctCardID {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.pcctCardIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctCardIDColumn] = value;
                }
            }
            
            public string pcctCustID {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.pcctCustIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctCustIDColumn] = value;
                }
            }
            
            public string pcctName {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.pcctNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctNameColumn] = value;
                }
            }
            
            public string pcctICPassportNo {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.pcctICPassportNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctICPassportNoColumn] = value;
                }
            }
            
            public string pcctCardType {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.pcctCardTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctCardTypeColumn] = value;
                }
            }
            
            public string lhCode {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.lhCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.lhCodeColumn] = value;
                }
            }
            
            public string tmCode {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.tmCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.tmCodeColumn] = value;
                }
            }
            
            public long shfShiftNo {
                get {
                    try {
                        return ((long)(this[this.tableWithdrawal.shfShiftNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.shfShiftNoColumn] = value;
                }
            }
            
            public System.DateTime pcctTradingDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWithdrawal.pcctTradingDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctTradingDateColumn] = value;
                }
            }
            
            public string fcAbbrvCode {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.fcAbbrvCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.fcAbbrvCodeColumn] = value;
                }
            }
            
            public string cmCode {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.cmCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.cmCodeColumn] = value;
                }
            }
            
            public System.Decimal pcccmAmount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableWithdrawal.pcccmAmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcccmAmountColumn] = value;
                }
            }
            
            public string DRSDocNo {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.DRSDocNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.DRSDocNoColumn] = value;
                }
            }
            
            public bool pcctIsVoided {
                get {
                    try {
                        return ((bool)(this[this.tableWithdrawal.pcctIsVoidedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctIsVoidedColumn] = value;
                }
            }
            
            public string pcctVoidedBy {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.pcctVoidedByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctVoidedByColumn] = value;
                }
            }
            
            public System.DateTime pcctVoidDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWithdrawal.pcctVoidDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctVoidDateColumn] = value;
                }
            }
            
            public string pcctVoidRemarks {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.pcctVoidRemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.pcctVoidRemarksColumn] = value;
                }
            }
            
            public string DRSCancelDocNo {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.DRSCancelDocNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.DRSCancelDocNoColumn] = value;
                }
            }
            
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableWithdrawal.CreatedByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.CreatedByColumn] = value;
                }
            }
            
            public System.DateTime DateCreated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWithdrawal.DateCreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWithdrawal.DateCreatedColumn] = value;
                }
            }
            
            public bool IsPCCTIDNull() {
                return this.IsNull(this.tableWithdrawal.PCCTIDColumn);
            }
            
            public void SetPCCTIDNull() {
                this[this.tableWithdrawal.PCCTIDColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctCardIDNull() {
                return this.IsNull(this.tableWithdrawal.pcctCardIDColumn);
            }
            
            public void SetpcctCardIDNull() {
                this[this.tableWithdrawal.pcctCardIDColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctCustIDNull() {
                return this.IsNull(this.tableWithdrawal.pcctCustIDColumn);
            }
            
            public void SetpcctCustIDNull() {
                this[this.tableWithdrawal.pcctCustIDColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctNameNull() {
                return this.IsNull(this.tableWithdrawal.pcctNameColumn);
            }
            
            public void SetpcctNameNull() {
                this[this.tableWithdrawal.pcctNameColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctICPassportNoNull() {
                return this.IsNull(this.tableWithdrawal.pcctICPassportNoColumn);
            }
            
            public void SetpcctICPassportNoNull() {
                this[this.tableWithdrawal.pcctICPassportNoColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctCardTypeNull() {
                return this.IsNull(this.tableWithdrawal.pcctCardTypeColumn);
            }
            
            public void SetpcctCardTypeNull() {
                this[this.tableWithdrawal.pcctCardTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IslhCodeNull() {
                return this.IsNull(this.tableWithdrawal.lhCodeColumn);
            }
            
            public void SetlhCodeNull() {
                this[this.tableWithdrawal.lhCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IstmCodeNull() {
                return this.IsNull(this.tableWithdrawal.tmCodeColumn);
            }
            
            public void SettmCodeNull() {
                this[this.tableWithdrawal.tmCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsshfShiftNoNull() {
                return this.IsNull(this.tableWithdrawal.shfShiftNoColumn);
            }
            
            public void SetshfShiftNoNull() {
                this[this.tableWithdrawal.shfShiftNoColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctTradingDateNull() {
                return this.IsNull(this.tableWithdrawal.pcctTradingDateColumn);
            }
            
            public void SetpcctTradingDateNull() {
                this[this.tableWithdrawal.pcctTradingDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsfcAbbrvCodeNull() {
                return this.IsNull(this.tableWithdrawal.fcAbbrvCodeColumn);
            }
            
            public void SetfcAbbrvCodeNull() {
                this[this.tableWithdrawal.fcAbbrvCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IscmCodeNull() {
                return this.IsNull(this.tableWithdrawal.cmCodeColumn);
            }
            
            public void SetcmCodeNull() {
                this[this.tableWithdrawal.cmCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IspcccmAmountNull() {
                return this.IsNull(this.tableWithdrawal.pcccmAmountColumn);
            }
            
            public void SetpcccmAmountNull() {
                this[this.tableWithdrawal.pcccmAmountColumn] = System.Convert.DBNull;
            }
            
            public bool IsDRSDocNoNull() {
                return this.IsNull(this.tableWithdrawal.DRSDocNoColumn);
            }
            
            public void SetDRSDocNoNull() {
                this[this.tableWithdrawal.DRSDocNoColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctIsVoidedNull() {
                return this.IsNull(this.tableWithdrawal.pcctIsVoidedColumn);
            }
            
            public void SetpcctIsVoidedNull() {
                this[this.tableWithdrawal.pcctIsVoidedColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctVoidedByNull() {
                return this.IsNull(this.tableWithdrawal.pcctVoidedByColumn);
            }
            
            public void SetpcctVoidedByNull() {
                this[this.tableWithdrawal.pcctVoidedByColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctVoidDateNull() {
                return this.IsNull(this.tableWithdrawal.pcctVoidDateColumn);
            }
            
            public void SetpcctVoidDateNull() {
                this[this.tableWithdrawal.pcctVoidDateColumn] = System.Convert.DBNull;
            }
            
            public bool IspcctVoidRemarksNull() {
                return this.IsNull(this.tableWithdrawal.pcctVoidRemarksColumn);
            }
            
            public void SetpcctVoidRemarksNull() {
                this[this.tableWithdrawal.pcctVoidRemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsDRSCancelDocNoNull() {
                return this.IsNull(this.tableWithdrawal.DRSCancelDocNoColumn);
            }
            
            public void SetDRSCancelDocNoNull() {
                this[this.tableWithdrawal.DRSCancelDocNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableWithdrawal.CreatedByColumn);
            }
            
            public void SetCreatedByNull() {
                this[this.tableWithdrawal.CreatedByColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateCreatedNull() {
                return this.IsNull(this.tableWithdrawal.DateCreatedColumn);
            }
            
            public void SetDateCreatedNull() {
                this[this.tableWithdrawal.DateCreatedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WithdrawalRowChangeEvent : EventArgs {
            
            private WithdrawalRow eventRow;
            
            private DataRowAction eventAction;
            
            public WithdrawalRowChangeEvent(WithdrawalRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WithdrawalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
